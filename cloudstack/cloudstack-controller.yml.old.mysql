---
- hosts: cscontrollers
  become: true
  tasks:
#  - name: Add Cloudstack External Repo
#    yum_repository:
#      name: cloudstack_external
#      description: Cloudstack External Repo
#      baseurl: http://download.cloudstack.org/centos7/4.11/
#      gpgcheck: no
#    tags:
#      - extrepo

  - name: Add Cloudstack Local Repo
    copy:
      src: templates/cloudstack.repo
      dest: /etc/yum.repos.d/cloudstack.repo
    tags:
      - intrepo

  - name: upgrade all packages
    yum:
      name: '*'
      state: latest
    tags:
      - update

    #Add epel-release for repairing dependensies with mysql-connector-python
  - name: Install epel-relese
    yum:
      name: epel-release
      state: latest
    tags:
      - epel

  - name: Install mysql-connector-python
    yum:
      name: mysql-connector-python
      state: latest
    tags:
      - packages

  - name: Install a list of packages
    yum:
      name: "{{ packages }}"
#    vars:
#      packages:
#      - cloudstack-management
#      - cloudstack-usage
#      - cloudstack-mysql-ha
#      - mariadb-server
#      - mariadb
#      - keepalived
#      - haproxy
#      - MySQL-python
#      - ucarp
    tags:
      - packages

  - name: Set selinux to permissive
    command: setenforce 0
    tags:
      - selinux

  - name: Set SELinux to permissive
    selinux:
      policy: targeted
      state: permissive
    tags:
      - selinux

  vars_files:
    - vars/main.yml

- hosts: first-controller
  become: true
  tasks:
  - name: Copy my.cnf for First controller Cloudstack
    copy:
      src: templates/first_controller.my.cnf
      dest: /etc/my.cnf
    tags:
      - mariafirst

  vars_files:
    - vars/main.yml

- hosts: second-controller
  become: true
  tasks:
  - name: Copy my.cnf for Second controller Cloudstack
    copy:
      src: templates/second_controller.my.cnf
      dest: /etc/my.cnf
    tags:
      - mariasecond

  vars_files:
    - vars/main.yml

- hosts: all
  become: true
  tasks:
  - name: start mysql service
    service:
      name: mariadb
      state: started
      enabled: yes
    tags:
      - mariafirst
      - mariasecond

  - name: MySQL | Set the root password.
    mysql_user: 
      name: root 
      host: "{{ item }}"
      login_user: root
#      login_password: "{{ mysql_root_password }}"
      password: "{{ mysql_root_password }}"
      priv: ".:ALL,GRANT"
    with_items:
      - "{{ ansible_hostname }}"
      - 127.0.0.1
      - ::1
      - localhost
#      - "{{ server_hostname }}"
    become: true
#    when: mysql_root_new_pass != mysql_root_old_pass and mysql_root_new_pass != ""

  - name: MySQL | Delete anonymous MySQL server user for {{ server_hostname }}
    mysql_user:
      name: ""
      host: "{{ item }}"
      state: "absent"
      login_user: root
      login_password: "{{ mysql_root_password }}"
    with_items:
      - "{{ ansible_hostname }}"
      - 127.0.0.1
      - ::1
      - localhost
#      - "{{ server_hostname }}"
    ignore_errors: true

#  - name: MySQL | Delete anonymous MySQL server user for localhost
#    mysql_user:
#      name: ""
#      state: "absent"
#      host: localhost
#      login_user: root
#      login_password: "{{ mysql_root_password }}"


#  - name: update mysql root password
#    mysql_user:
#      user: "root"
#      password: "{{ mysql_root_password }}"
#      host: "localhost"
#      login_user: "root"
#      login_password: ""
#    ignore_errors: true
#    tags:
#      - mariafirst
#      - mariasecond

  - name: add mysql user replication and grant access with REPLICATION SLAVE rights
    mysql_user:
      user: "replication"
      password: "{{ replication_password }}"
      priv: "*.*:REPLICATION SLAVE"
      login_user: "root"
      login_password: "{{ mysql_root_password }}"
      state: present
    tags:
      - mariafirst
      - mariasecond

  - name: add mysql user cloud
    mysql_user:
      user: "cloud"
      password: "{{ cloud_password }}"
      priv: '*.*:ALL,GRANT'
      login_user: "root"
      login_password: "{{ mysql_root_password }}"
      state: present
    tags:
      - mariafirst
      - mariasecond

  - name: Stop slave on all nodes
    mysql_replication:
      mode: stopslave
      login_user: "root"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariafirst
      - mariasecond

  vars_files:
    - vars/main.yml

#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    cloud_password: secret

- hosts: first-controller
  become: true
  tasks:
  - name: change master to second controller
    mysql_replication:
      mode: "{{ mysqlmode }}"
      master_host: "{{ mysql_replication_slave }}"
      master_user: "{{ masteruser }}"
      master_password: "{{ replication_password }}"
      master_log_file: "{{ masterlogfile }}"
      master_log_pos: "{{ masterlogpos }}"
      login_user: "{{ loginuser }}"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariafirst

  - name: start slave on first controller
    mysql_replication:
      mode: startslave
      login_user: "{{ loginuser }}"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariafirst

  vars_files:
    - vars/main.yml

#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    mysql_replication_master: 172.28.128.6
#    mysql_replication_slave: 172.28.128.5

- hosts: second-controller
  become: true
  tasks:
  - name: start slave on second controller
    mysql_replication:
      mode: stopslave
      login_user: "{{ loginuser }}"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariasecond

  - name: change master to first controller
    mysql_replication:
      mode: "{{ mysqlmode }}"
      master_host: "{{ mysql_replication_master }}"
      master_user: "{{ masteruser }}"
      master_password: "{{ replication_password }}"
      master_log_file: "{{ masterlogfile }}"
      master_log_pos: "{{ masterlogpos }}"
      login_user: "{{ loginuser }}"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariasecond

  - name: start slave on second controller
    mysql_replication:
      mode: startslave
      login_user: "{{ loginuser }}"
      login_password: "{{ mysql_root_password }}"
    tags:
      - mariasecond

#  - name: Copy template VIP-{{ id }}
#    copy:
#      src: templates/vip-001.conf
#      dest: /etc/ucarp/vip-001.conf
#    tags:
#      - vip
  - name: Copy template VIP-{{ id }}
    template:
      src: templates/vip-001.conf.j2
      dest: /etc/ucarp/vip-{{ id }}.conf
    tags:
      - vip

  - name: add VIP_ADDRESS to /etc/ucarp/vip-{{ id }}.conf
    lineinfile:
      path: /etc/ucarp/vip-{{ id }}.conf
      regexp: '^VIP_ADDRESS='
      line: 'VIP_ADDRESS={{ mysql_replication_vip }}'
    tags:
      - vip

  vars_files:
    - vars/main.yml


#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    mysql_replication_master: 172.28.128.6
#    mysql_replication_slave: 172.28.128.5
#    mysql_replication_vip: 172.28.128.100

- hosts: first-controller
  become: true
  tasks:
  - name: add SOURCE_ADDRESS to /etc/ucarp/vip-{{ id }}.conf
    lineinfile:
      path: /etc/ucarp/vip-{{ id }}.conf
      regexp: '^SOURCE_ADDRESS='
      line: 'SOURCE_ADDRESS={{ mysql_replication_master }}'

  - name: Run cloudstack-setup-databases on the first controller
    shell: "cloudstack-setup-databases cloud:{{ cloud_password }}@localhost --deploy-as=root:{{ mysql_root_password }}"

    register: cloudstack-setup-databases_output
#  - name: Run cloudstack-setup-databases output
#    debug: msg="{{ cloudstack-setup-databases_output.stdout }}"
#  - name: Run cloudstack-setup-databases error
#    debug: msg="{{ cloudstack-setup-databases_output.stderr }}"
  #Generating certificates
  - name: Export
    shell: "export AWS creds for r53"

  - name: Export AWS_ACCESS_KEY_ID
    shell: "export AWS_ACCESS_KEY_ID={{ LetsEncryptCreds }}"

  - name: Export
    shell: "export AWS_SECRET_ACCESS_KEY={{ LetsEncryptCreds }}"

  - name: Generate certs valid for all public IPs for the zone
    shell: "/root/.acme.sh/acme.sh  --issue --dns dns_aws -d {{ CSDOM }} -d '*.svm.{{ CSDOM }}'"
    ignore_errors: true     #check with real domain

  - name: Concatenate for HA proxy, cer
    shell: "cat /root/.acme.sh/{{ CSDOM }}/{{ CSDOM }}.crt > {{ CSDOM }}.pem"
    ignore_errors: true     #check with real domain

  - name: Concatenate for HA proxy, key
    shell: "cat /root/.acme.sh/{{ CSDOM }}/{{ CSDOM }}.key >> {{ CSDOM }}.pem"
    ignore_errors: true     #check with real domain

  - name: Copy cert to the local folder
    shell: "cp {{ CSDOM }}.pem /etc/haproxy/"

  - name: Copy cert to the second controller
    shell: "scp {{ CSDOM }}.pem {{ mysql_replication_slave }}:/etc/haproxy/"

  vars_files:
    - vars/main.yml

#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    cloud_password: secret

#    mysql_replication_slave: 172.28.128.5
#    mysql_replication_vip: 172.28.128.100
#    LetsEncryptCreds: example.com
#    CSDOM: cstack-prod.example.com

- hosts: second-controller
  become: true
  tasks:
  - name: add SOURCE_ADDRESS to /etc/ucarp/vip-{{ id }}.conf
    lineinfile:
      path: /etc/ucarp/vip-{{ id }}.conf
      regexp: '^SOURCE_ADDRESS='
      line: 'SOURCE_ADDRESS={{ mysql_replication_slave }}'

  - name: Run cloudstack-setup-databases  on the second controller
    shell: "cloudstack-setup-databases cloud:{{ cloud_password }}@localhost"
    register: cloudstack-setup-databases_output

  vars_files:
    - vars/main.yml

#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    cloud_password: secret
#    mysql_replication_master: 172.28.128.6
#    mysql_replication_slave: 172.28.128.5
#    mysql_replication_vip: 172.28.128.100

- hosts: all
  become: true
  tasks:
  - name: add db.cloud.host to /etc/cloudstack/management/db.properties
    lineinfile:
      path: /etc/cloudstack/management/db.properties
      regexp: '^db.cloud.host'
      line: 'db.cloud.host={{ mysql_replication_master }}'

  - name: add db.cloud.initialTimeout to /etc/cloudstack/management/db.properties
    lineinfile:
      path: /etc/cloudstack/management/db.properties
      regexp: '^db.cloud.initialTimeout'
      line: 'db.cloud.initialTimeout=300'

  - name: add db.ha.enabled to /etc/cloudstack/management/db.properties
    lineinfile:
      path: /etc/cloudstack/management/db.properties
      regexp: '^db.ha.enabled'
      line: 'db.ha.enabled=true'

  - name: add db.cloud.slaves to /etc/cloudstack/management/db.properties
    lineinfile:
      path: /etc/cloudstack/management/db.properties
      regexp: '^db.cloud.slaves'
      line: 'db.cloud.slaves={{ mysql_replication_slave }}'

  - name: Run cloudstack-setup-management
    shell: "cloudstack-setup-management --no-start"
    register: cloudstack-setup-management --no-start_output

  - name: service cloudstack-management.service start
    service:
      name: cloudstack-management.service
      state: started

  - name: create file /etc/ucarp/vip-{{ id }}.pwd
    file:
      dest: /etc/ucarp/vip-{{ id }}.pwd
      state: touch

  - name: add Password to /etc/ucarp/vip-{{ id }}.pwd
    lineinfile:
      path: /etc/ucarp/vip-{{ id }}.pwd
      line: 'dev1'

  - name: service ucarp@{{ id }} start
    service:
      name: ucarp@{{ id }}
      state: started
      enabled: yes

  - name: service haproxy restart
    service:
      name: haproxy
      state: restarted
      enabled: yes

# HAPROXY
  - name: Copy template ha-proxy
    copy:
      src: templates/haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg

  - name: bind *:443 ssl crt in haproxy.cfg
    lineinfile:
      path: /etc/haproxy/haproxy.cfg
      regexp: '^bind *:443 ssl crt'
      line: 'bind *:443 ssl crt /etc/haproxy/{{ CSDOM }}.pem'

  - name: bind *:443 ssl crt in haproxy.cfg
    lineinfile:
      path: /etc/haproxy/haproxy.cfg
      regexp: '^server ctl1'
      line: 'server ctl1 cs-ctl1.sys.{{ LetsEncryptCreds }}:8080 cookie 1 check'

  - name: bind *:443 ssl crt in haproxy.cfg
    lineinfile:
      path: /etc/haproxy/haproxy.cfg
      regexp: '^server ctl2'
      line: 'server ctl2 cs-ctl2.sys.{{ LetsEncryptCreds }}:8080 cookie 2 check'

  vars_files:
    - vars/main.yml

- hosts: second-controller
  become: true
  tasks:
  - name: add SOURCE_ADDRESS to /etc/ucarp/vip-{{ id }}.conf
    command: for i in {{ scrules }} ; do cs createRolePermission roleid=i{{ roleid }}  rule=$i permission=allow; done

  vars_files:
    - vars/main.yml


- hosts: all
  become: true
  tasks:
  - name: Disable SNI for the controller JVM  (because of Infoblox certificates)
    lineinfile:
      path: /etc/default/cloudstack-management
      regexp: '^db.cloud.host'
      line: '-Djsse.enableSNIExtension=false'

#Cloudstack-infra
  - name: install ticketmaster-api-extensions
    yum:
      name: http://maven.platform.tm.tmcs:8081/nexus/content/repositories/releases/com/ticketmaster/techops-infra/cloudstack/ticketmaster-api-extensions-0.15.0-1.x86_64.rpm
      state: present
    ignore_errors: true

  - name: install ticketmaster-xen-migration
    yum:
      name: http://maven.platform.tm.tmcs:8081/nexus/content/repositories/releases/com/ticketmaster/techops-infra/cloudstack/ticketmaster-xen-migration-0.16.3-1.x86_64.rpm
      state: present
    ignore_errors: true

  - name: service haproxy restart
    service:
      name: cloudstack-management
      state: restarted

  vars_files:
    - vars/main.yml

#  vars:
#    mysql_root_password: Cl0ud5tack
#    replication_password: Cl0ud5tack
#    mysql_replication_master: 172.28.128.6
#    mysql_replication_slave: 172.28.128.5
#    CSDOM: cstack-prod.example.com
#    LetsEncryptCreds: example.com
