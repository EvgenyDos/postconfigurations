---

- name: Create the network configuration file for ethernet devices
  template:
#    src: ../../../templates/ethernet_centos.j2
    src: ../../../templates/ifcfg-{{ item }}
    dest: /etc/sysconfig/network-scripts/ifcfg-{{ item }}
  with_items:
   - "{{ ansible_interfaces | map('replace', '-','_') | list }}"
#   - eth0
#   - eth1
#   - {{ ansible_interfaces }}
  tags:
    - static

- name:  Disable and stop NetworkManager service
  service:
    name: NetworkManager
    state: stopped
    enabled: no
  tags:
    - static

- name:  Restart nenwork service
  service:
    name: network
    state: restarted
  tags:
    - static

#  when: network_ether_interfaces is defined
#  when: "item.startswith('10.')"
#  register: ether_result

#- name: Write configuration files for rhel route configuration
#  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }} 
#  with_items: network_ether_interfaces
#  when: network_ether_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'



#- name: Create the network configuration file for ethernet devices
#  template: src=../../../ethernet_centos.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.device }}
#  template:
#    src: ../../../templates/ifcfg-interface
#    dest: /etc/sysconfig/network-scripts/ifcfg-{{ item }}
#  with_items: "{{ ansible_interfaces }}"
#  with_items: network_ether_interfaces
#  when: network_ether_interfaces is defined
#  register: ether_result


#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
#  with_items: ether_result.results
#  when: ether_result is defined and item.changed

#- name: define traditional ethernet facts
#  set_fact:
#    ansible_eth: "{% set ansible_eth = ansible_eth|default([]) + [hostvars[inventory_hostname]['ansible_' + item]] %}{{ ansible_eth|list }}"
#  when: hostvars[inventory_hostname]['ansible_' + item]['type'] == 'ether'
#  with_items:
#    - "{{ hostvars[inventory_hostname]['ansible_interfaces'] }}"


#- name: Get the host IP
#  shell: echo "{{ ansible_eth0.active }}" > /tmp/3
#  [u'lo', u'eth1', u'eth0']
#  register: host_sh
#- debug: msg="{{ host_sh.stdout }}"

#- name: find interface facts
#  debug: msg=ansible_{{ item }}
#  with_items: "{{ ansible_interfaces }}"

#- name: find IP
#  set_fact:
#    ip: "{{ item }}"
#  with_items: "{{ansible_all_ipv4_addresses}}"
#  when: "item.startswith('172.')"
